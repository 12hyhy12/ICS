#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.

#Zhang Yuhao 1500012703

#firstly,we use the 'iaddl' instead of 'irmovl+opl'
#secondly, we try to avoid RAW by reading from src two elements at one time.
#By doing that, when 'mrmovl (%ebx), %esi' in 'M' statu, 'rmmovl %esi, (%ecx)' is in 'D' statu.
#But I try to excute three or more number at one time.The performance is getting worse.
#Because the remaining len%2 can be done using one jXX, 
#while when the remaining is len%3 or len%4,we should use another for to complete the calculation.
#See the details in the comment after each instruction.
#
##################################################################
# Do not modify this portion
# Function prologue.
ncopy:	pushl %ebp		# Save old frame pointer
	rrmovl %esp,%ebp	# Set up new frame pointer
	pushl %esi		# Save callee-save regs
	pushl %ebx
	pushl %edi
	mrmovl 8(%ebp),%ebx	# src
	mrmovl 16(%ebp),%edx	# len
	mrmovl 12(%ebp),%ecx	# dst

##################################################################
# You can modify this portion
	# Loop header
	xorl %eax,%eax		# count = 0;
	iaddl $-1, %edx		# len-=1
	jle REMAIN
Loop:	mrmovl (%ebx), %esi	# read val from src...
	mrmovl 4(%ebx), %edi # read val from src+4...
	rmmovl %esi, (%ecx)	 # ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle S1		# if so, goto S1:
	iaddl $1, %eax		# count++
S1:
	rmmovl %edi, 4(%ecx)  # ...and store it to dst+4
	andl %edi, %edi		# val <= 0?
	jle Npos:	# if so, goto Npos:
	iaddl $1, %eax		# count++
Npos:	
	iaddl $8, %ebx		# src+=2
	iaddl $8, %ecx		# dst+=2
	iaddl -2, %edx		# len-=2
	jg Loop
REMAIN:
	jne Done		# if so, goto Done:
	mrmovl (%ebx), %esi	# read val from src...
	rmmovl %esi, (%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle Done:		# if so, goto Done:
	iaddl $1, %eax		# count++
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	popl %edi               # Restore callee-save registers
	popl %ebx
	popl %esi
	rrmovl %ebp, %esp
	popl %ebp
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
